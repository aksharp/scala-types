package scala.types

import scala.util.{Failure, Success, Try}

object ManifestAndTypeErasure {

//  As we know, type information is lost at compile time due to erasure. Scala features Manifests, allowing us to selectively recover type information. Manifests are provided as an implicit value, generated by the compiler as needed.

  class MakeFoo[A](
    implicit manifest: Manifest[A]
  ) {
    def make: A = manifest.runtimeClass.newInstance.asInstanceOf[A]
  }

  (new MakeFoo[String]).make
//  res10: String = ""



  // useful when pattern matching on type
  class MyClass[T] {

    def expectFailedHttpStatus(f: => Unit, expectedErrorCode: Int)(
      implicit m: Manifest[T],
      getStatus: T => Int)
    {
      val result = Try(f) match {
        case Success(_) => s"Expected HTTP[$expectedErrorCode] but got HTTP 2xx"
        case Failure(ex) => ex match {
          case r: T if getStatus(r) == expectedErrorCode => s"great! got status $expectedErrorCode as expected"
          case r: T => s"Expected status code[$expectedErrorCode] but found[${getStatus(r)}]"
          case otherError => s"Unexpected error: $otherError"
        }
      }
    }

  }

}
